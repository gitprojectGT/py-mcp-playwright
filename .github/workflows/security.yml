name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'requirements*.txt'
      - 'Dockerfile'
      - 'src/**'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'requirements*.txt'
      - 'Dockerfile'
      - 'src/**'
      - '.github/workflows/security.yml'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - code
        - dependencies
        - containers
        - secrets

env:
  PYTHON_VERSION: '3.13'

jobs:
  # Code security analysis
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt -o bandit-report.txt
        continue-on-error: true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/bandit
          generateSarif: "1"
        continue-on-error: true

      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-security-results
          path: |
            bandit-report.json
            bandit-report.txt
            semgrep.sarif
          retention-days: 30

  # Dependency vulnerability scan
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=text --output=pip-audit-report.txt || true

      - name: GitHub Security Advisory check
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: requirements.txt requirements-dev.txt
          format: sarif
          output: pip-audit.sarif
        continue-on-error: true

      - name: Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: pip-audit.sarif

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-results
          path: |
            safety-report.json
            safety-report.txt
            pip-audit-report.json
            pip-audit-report.txt
            pip-audit.sarif
          retention-days: 30

  # Container security scan
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: security-scan:latest
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy filesystem results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        if: always()
        with:
          command: cves
          image: security-scan:latest
          format: sarif
          output: scout-results.sarif
        continue-on-error: true

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-results.sarif
            trivy-fs-results.sarif
            scout-results.sarif
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            results.sarif
          retention-days: 30

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install license tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck

      - name: Generate license report
        run: |
          pip install -r requirements.txt
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=plain --output-file=licenses.txt
          licensecheck --format=json > license-check.json || true

      - name: Check for prohibited licenses
        run: |
          # Define prohibited licenses
          PROHIBITED_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
          
          # Check for prohibited licenses
          if grep -E "($PROHIBITED_LICENSES)" licenses.json; then
            echo "‚ùå Found prohibited licenses!"
            echo "PROHIBITED_FOUND=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No prohibited licenses found"
            echo "PROHIBITED_FOUND=false" >> $GITHUB_ENV
          fi

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.txt
            license-check.json
          retention-days: 30

      - name: Fail on prohibited licenses
        if: env.PROHIBITED_FOUND == 'true'
        run: |
          echo "‚ùå Prohibited licenses found. Please review and replace problematic dependencies."
          exit 1

  # Security policy check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [[ -f "SECURITY.md" ]]; then
            echo "‚úÖ Security policy found"
            echo "HAS_SECURITY_POLICY=true" >> $GITHUB_ENV
          else
            echo "‚ùå No security policy found"
            echo "HAS_SECURITY_POLICY=false" >> $GITHUB_ENV
          fi

      - name: Check for security contacts
        run: |
          if [[ -f ".github/SECURITY.md" ]] || grep -q "security" README.md; then
            echo "‚úÖ Security contact information found"
          else
            echo "‚ö†Ô∏è No security contact information found"
          fi

      - name: Create security policy reminder
        if: env.HAS_SECURITY_POLICY == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const title = "üìã Security Policy Missing";
            const body = `## Security Policy Recommendation
            
            This repository doesn't have a security policy (SECURITY.md).
            
            ### Recommended Actions:
            1. Create a SECURITY.md file in the repository root
            2. Include supported versions
            3. Add vulnerability reporting instructions
            4. Specify security contact information
            5. Define security update process
            
            ### Template:
            You can use GitHub's security policy template or create your own based on industry best practices.
            
            This helps users and security researchers understand how to report vulnerabilities responsibly.`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security-policy'
            });
            
            if (issues.data.length === 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security-policy', 'documentation', 'good first issue']
              });
            }

  # Generate security report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, container-security, secret-scan, license-check]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*security*'
          merge-multiple: true
          path: security-results/

      - name: Generate security summary
        run: |
          echo "# üîí Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date**: $(date -u)" >> security-summary.md
          echo "**Repository**: ${{ github.repository }}" >> security-summary.md
          echo "**Commit**: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          if [[ "${{ needs.code-security.result }}" == "success" ]]; then
            echo "‚úÖ **Code Security**: Passed" >> security-summary.md
          else
            echo "‚ùå **Code Security**: Failed" >> security-summary.md
          fi
          
          if [[ "${{ needs.dependency-security.result }}" == "success" ]]; then
            echo "‚úÖ **Dependency Security**: Passed" >> security-summary.md
          else
            echo "‚ùå **Dependency Security**: Failed" >> security-summary.md
          fi
          
          if [[ "${{ needs.container-security.result }}" == "success" ]]; then
            echo "‚úÖ **Container Security**: Passed" >> security-summary.md
          else
            echo "‚ùå **Container Security**: Failed" >> security-summary.md
          fi
          
          if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "‚úÖ **Secret Scanning**: Passed" >> security-summary.md
          else
            echo "‚ùå **Secret Scanning**: Failed" >> security-summary.md
          fi
          
          if [[ "${{ needs.license-check.result }}" == "success" ]]; then
            echo "‚úÖ **License Compliance**: Passed" >> security-summary.md
          else
            echo "‚ùå **License Compliance**: Failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review detailed scan results in workflow artifacts" >> security-summary.md
          echo "2. Address any high/critical severity findings" >> security-summary.md
          echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "4. Ensure security policies are in place" >> security-summary.md
          
          # Add to job summary
          cat security-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: |
            security-summary.md
            security-results/
          retention-days: 90

      - name: Create security issue on failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Security Scan Failures - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Security Scan Failures Detected
            
            **Workflow**: [Security Scan](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Commit**: ${{ github.sha }}
            **Date**: ${new Date().toISOString()}
            
            ### Failed Scans
            - Code Security: ${{ needs.code-security.result }}
            - Dependency Security: ${{ needs.dependency-security.result }}
            - Container Security: ${{ needs.container-security.result }}
            - Secret Scanning: ${{ needs.secret-scan.result }}
            - License Check: ${{ needs.license-check.result }}
            
            ### Action Required
            1. Review the workflow logs for specific issues
            2. Download and analyze security scan artifacts
            3. Address high and critical severity findings
            4. Re-run security scans after fixes
            5. Close this issue when all security issues are resolved
            
            ### Resources
            - [Security Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Security Tab](${{ github.server_url }}/${{ github.repository }}/security)
            - [Security Advisories](${{ github.server_url }}/${{ github.repository }}/security/advisories)
            
            /cc @${{ github.actor }}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'bug', 'priority-high']
            });