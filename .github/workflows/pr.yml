name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  # Skip if PR is in draft
  check-draft:
    name: Check Draft Status
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.draft-check.outputs.is-draft }}
    steps:
      - name: Check if PR is draft
        id: draft-check
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "is-draft=true" >> $GITHUB_OUTPUT
            echo "::notice::PR is in draft mode, skipping detailed checks"
          else
            echo "is-draft=false" >> $GITHUB_OUTPUT
          fi

  # PR validation and labeling
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Auto-label PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: Check for breaking changes
        id: breaking-changes
        run: |
          if git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -i "BREAKING CHANGE"; then
            echo "has-breaking=true" >> $GITHUB_OUTPUT
            echo "::warning::This PR contains breaking changes!"
          else
            echo "has-breaking=false" >> $GITHUB_OUTPUT
          fi

      - name: Add breaking change label
        if: steps.breaking-changes.outputs.has-breaking == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: |
            breaking-change
            major

  # Quick validation tests
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Quick code quality check
        run: |
          black --check --diff src/ tests/ utils/ examples/
          flake8 src/ tests/ utils/ examples/ --select=E9,F63,F7,F82 --show-source --statistics

      - name: Import validation
        run: |
          python -c "
          import sys
          sys.path.append('src')
          try:
              from src.config import get_test_config, get_api_config
              from src.test_helpers import TestDataGenerator, APITestHelper
              print('✅ All imports successful')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              sys.exit(1)
          "

  # Smoke tests for PRs
  pr-smoke-tests:
    name: PR Smoke Tests
    runs-on: ubuntu-latest
    needs: [check-draft, quick-validation]
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: pr-tests:latest
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: Run smoke tests
        id: smoke-tests
        run: |
          mkdir -p test-results
          docker run --rm \
            -e HEADLESS=true \
            -e TEST_ENV=pr \
            -e PYTEST_WORKERS=1 \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            pr-tests:latest \
            python -m pytest -m smoke --tb=short -x \
            --junitxml=test-results/junit-pr-smoke.xml

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-smoke-test-results
          path: test-results/
          retention-days: 3

      - name: Comment test results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let status = '✅ Passed';
            let message = 'All smoke tests passed successfully!';
            
            if ('${{ steps.smoke-tests.outcome }}' !== 'success') {
              status = '❌ Failed';
              message = 'Some smoke tests failed. Please check the logs for details.';
            }
            
            const body = `## 🧪 PR Smoke Test Results
            
            **Status**: ${status}
            
            ${message}
            
            - **Test Environment**: PR validation
            - **Commit**: ${{ github.event.pull_request.head.sha }}
            - **Tests Run**: Smoke tests only (quick validation)
            
            > Full test suite will run after merge to main branch.
            
            <details>
            <summary>View test artifacts</summary>
            
            Test results and logs are available in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            </details>`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('🧪 PR Smoke Test Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Security check for PRs
  pr-security:
    name: PR Security Scan
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run security scan on changed files
        run: |
          # Get changed Python files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep '\.py$' | tr '\n' ' ')
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Scanning changed files: $CHANGED_FILES"
            bandit -r $CHANGED_FILES -f json -o bandit-pr.json || true
            
            # Check for common security issues
            echo "## Security Scan Results" >> security-summary.md
            if grep -q '"issue_severity": "HIGH"' bandit-pr.json; then
              echo "❌ High severity security issues found!" >> security-summary.md
              echo "HIGH_SEVERITY_FOUND=true" >> $GITHUB_ENV
            elif grep -q '"issue_severity": "MEDIUM"' bandit-pr.json; then
              echo "⚠️ Medium severity security issues found" >> security-summary.md
              echo "MEDIUM_SEVERITY_FOUND=true" >> $GITHUB_ENV
            else
              echo "✅ No security issues found" >> security-summary.md
            fi
          else
            echo "No Python files changed" >> security-summary.md
          fi

      - name: Comment security results
        uses: actions/github-script@v7
        if: env.HIGH_SEVERITY_FOUND == 'true' || env.MEDIUM_SEVERITY_FOUND == 'true'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            const body = `## 🔒 Security Scan Results
            
            ${summary}
            
            Please review and address any security issues before merging.
            
            <details>
            <summary>View detailed security report</summary>
            
            Check the workflow run for detailed security scan results.
            
            </details>`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Fail on high severity issues
        if: env.HIGH_SEVERITY_FOUND == 'true'
        run: |
          echo "❌ High severity security issues found. Please fix them before merging."
          exit 1

  # Changed files analysis
  changes-analysis:
    name: Analyze Changes
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    outputs:
      has-tests: ${{ steps.changes.outputs.has-tests }}
      has-src: ${{ steps.changes.outputs.has-src }}
      has-docs: ${{ steps.changes.outputs.has-docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changed files
        id: changes
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for different types of changes
          if echo "$CHANGED_FILES" | grep -q "^tests/"; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
            echo "✅ Test files modified"
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -q "^src/"; then
            echo "has-src=true" >> $GITHUB_OUTPUT
            echo "✅ Source files modified"
          else
            echo "has-src=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -q -E "\.(md|rst|txt)$"; then
            echo "has-docs=true" >> $GITHUB_OUTPUT
            echo "✅ Documentation modified"
          else
            echo "has-docs=false" >> $GITHUB_OUTPUT
          fi

      - name: Check test coverage for source changes
        if: steps.changes.outputs.has-src == 'true' && steps.changes.outputs.has-tests == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ⚠️ Missing Tests
              
              This PR modifies source code but doesn't include any test changes.
              
              Please consider:
              - Adding tests for new functionality
              - Updating existing tests if behavior changed
              - Adding integration tests if needed
              
              If tests aren't needed for this change, please explain why in the PR description.`
            });

  # Size check
  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        run: |
          ADDITIONS=$(git diff --shortstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo 0)
          DELETIONS=$(git diff --shortstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -oE '[0-9]+ deletion' | grep -oE '[0-9]+' || echo 0)
          TOTAL=$((ADDITIONS + DELETIONS))
          FILES_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | wc -l)
          
          echo "PR Statistics:"
          echo "- Files changed: $FILES_CHANGED"
          echo "- Lines added: $ADDITIONS"
          echo "- Lines deleted: $DELETIONS"
          echo "- Total changes: $TOTAL"
          
          # Determine size label
          if [ $TOTAL -lt 50 ]; then
            SIZE_LABEL="size/XS"
          elif [ $TOTAL -lt 200 ]; then
            SIZE_LABEL="size/S"
          elif [ $TOTAL -lt 500 ]; then
            SIZE_LABEL="size/M"
          elif [ $TOTAL -lt 1000 ]; then
            SIZE_LABEL="size/L"
          else
            SIZE_LABEL="size/XL"
          fi
          
          echo "SIZE_LABEL=$SIZE_LABEL" >> $GITHUB_ENV
          echo "TOTAL_CHANGES=$TOTAL" >> $GITHUB_ENV

      - name: Add size label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ env.SIZE_LABEL }}

      - name: Large PR warning
        if: env.TOTAL_CHANGES > 1000
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🚨 Large PR Warning
              
              This PR contains **${{ env.TOTAL_CHANGES }}** line changes, which is quite large.
              
              Large PRs:
              - Are harder to review thoroughly
              - Take longer to merge
              - Have higher risk of conflicts
              - May hide important changes
              
              Consider:
              - Breaking this PR into smaller, focused changes
              - Creating separate PRs for independent features
              - Using feature flags for gradual rollouts
              
              If this large size is necessary, please provide context in the PR description.`
            });

  # Final PR status
  pr-status:
    name: PR Status Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, pr-smoke-tests, pr-security, changes-analysis]
    if: always() && needs.check-draft.outputs.is-draft == 'false'
    steps:
      - name: Generate status summary
        run: |
          echo "## 📋 PR Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          if [[ "${{ needs.pr-validation.result }}" == "success" ]]; then
            echo "✅ **Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.pr-smoke-tests.result }}" == "success" ]]; then
            echo "✅ **Smoke Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Smoke Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.pr-security.result }}" == "success" ]]; then
            echo "✅ **Security**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for review**: $(if [[ "${{ needs.pr-validation.result }}" == "success" && "${{ needs.pr-smoke-tests.result }}" == "success" && "${{ needs.pr-security.result }}" == "success" ]]; then echo "✅ Yes"; else echo "❌ No"; fi)" >> $GITHUB_STEP_SUMMARY